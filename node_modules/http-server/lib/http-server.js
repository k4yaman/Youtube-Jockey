var fs      = require('fs'),
util        = require('util'),
union       = require('union'),
ecstatic    = require('ecstatic'),
assert      = require('assertthat'),
mysql       = require('mysql');;


var request = require('request');
request('http://www.wimp.com/archives/2016/01/index.html', function (error, response, body) {
  if (!error && response.statusCode == 200) {
    //console.log(body) // Show the HTML for the Google homepage.
  }
});

var jsdom = require("node-jsdom");

jsdom.env({
  url: "http://www.wimp.com/archives/2016/01/index.html",
  scripts: ["http://code.jquery.com/jquery.js"],
  done: function (err, window) {
    var $ = window.$;
    var expCnt = 154,
    actCnt = 0;

    $(".latest-third").children("div").children("a").each(function(){
        //console.log($(this).attr("href"));
        
      });
    $(".latest-third").children("div").children(".date").each(function(){
        //console.log($(this).html());
        // actCnt++;
      });

    $(".latest-third").children("div").each(function(){
      //console.log($(this).children("a").attr("href") + " <> " +$(this).children(".date").html());
    });

    console.log("---------------");
    console.log("<" + expCnt + "> = <" + actCnt +">");


    assert.that(expCnt).is.equalTo(actCnt);


    //MaraiDB Part

    var connection = mysql.createConnection({
      host     : 'localhost',
      user     : 'wimp',
      password : 'd7zwkDytjIHLxte0',
      database : 'wimp'
    });

    connection.connect(function(err) {
      if (err) throw err;
    });

    var dateToInsert = new Date ($(".latest-third").children("div").children(".date").first().html());
    console.log(dateToInsert); 

    var duplicateCnter = 0;
    var post  = {
      link: $(".latest-third").children("div").children("a").first().attr("href"), 
      date: dateToInsert
    };
    var query = connection.query('INSERT INTO wimp SET ?', post, function(err, result) {

      if (err) {
        if (err.code === 'ER_DUP_ENTRY')
          { duplicateCnter++;}
        else
        {
          throw err;
        }
      }
      console.log(result);
      if (duplicateCnter != 0)
        console.log("Found " + duplicateCnter + " duplicate(s)!")
    });

    console.log(query.sql);
  }
});


var HTTPServer = exports.HTTPServer = function (options) {
  options = options || {};

  if (options.root) {
    this.root = options.root;
  }
  else {
    try {
      fs.lstatSync('./public');
      this.root = './public';
    }
    catch (err) {
      this.root = './';
    }
  }

  if (options.headers) {
    this.headers = options.headers;
  }

  this.cache = options.cache || 3600; // in seconds.
  this.showDir = options.showDir !== 'false';
  this.autoIndex = options.autoIndex !== 'false';

  if (options.ext) {
    this.ext = options.ext === true
    ? 'html'
    : options.ext;
  }

  this.server = union.createServer({
    before: (options.before || []).concat([
      function (req, res) {
        options.logFn && options.logFn(req, res);
        res.emit('next');
      },
      ecstatic({
        root: this.root,
        cache: this.cache,
        showDir : this.showDir,
        autoIndex: this.autoIndex,
        defaultExt: this.ext
      })
      ]),
    headers: this.headers || {}
  });
};

HTTPServer.prototype.listen = function () {
  this.server.listen.apply(this.server, arguments);
};

HTTPServer.prototype.close = function () {
  return this.server.close();
};

exports.createServer = function (options) {
  return new HTTPServer(options);
};
